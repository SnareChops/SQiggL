import {DSL, DSLVariable, DSLReplacement} from './dsl';
import {CommentParser} from './parsers/comment.parser';
import {ReplacementParser} from "./parsers/replacement.parser";
import {CommandParser} from "./parsers/command.parser";
import {StartingAction, DependentAction} from "./actions";

export interface ParserOptions{
    exportComments?: boolean;
    commentBeginning?: string;
    commentEnding?: string;
    stringEscapeChar?: string;
    trueString?: string;
    falseString?: string;
}

export interface ScopedVariables{
    [key: string]: any;
}

export const DEFAULT_PARSER_OPTIONS: ParserOptions = {
    exportComments: false,
    commentBeginning: '/*',
    commentEnding: '*/',
    stringEscapeChar: '\\',
    trueString: '1',
    falseString: '0'
};

export class Parser{
    private options: ParserOptions = <ParserOptions>{};
    constructor(options: ParserOptions = {}){
        this.setOptions(options);
    }

    private setOptions(options: ParserOptions): Parser{
        for(var key of Object.keys(DEFAULT_PARSER_OPTIONS)){
            this.options[key] = options[key] || DEFAULT_PARSER_OPTIONS[key];
        }
        return this;
    }

    /**
     * Walk the DSL and generate final SQL output
     * @param dsl {DSL[]} - The DSL generated by the Lexer
     * @param variables {ScopedVariables}
     * @returns {string} - The final SQL output
     */
    public parse(dsl: DSL[], variables?: ScopedVariables): string{
        let output: string = '', idx: number;
        for(idx=0; idx < dsl.length; idx++){
            if(dsl[idx].variable) variables = this.resolveVariable(dsl[idx].variable, variables);
            if(dsl[idx].command && !!(<DependentAction | StartingAction>dsl[idx].command.action).rule){
                if((!!(<DependentAction>dsl[idx].command.action).dependents && dsl[idx-1].command.failed !== true)) continue;
                output += new CommandParser(this.options).parse(dsl[idx], variables);
            }
            if(dsl[idx].replacement){
                output += new ReplacementParser(this.options).parse(dsl[idx].replacement, variables);
            }
            if(dsl[idx].comment && this.options.exportComments){
                output += new CommentParser(this.options).parse(dsl[idx].comment);
            }
            if(dsl[idx].text) output += dsl[idx].text;
        }
        return output;
    }

    /**
     * Resolve the known variables within the scope and return the modified collection
     *
     * @param dsl {DSLVariable}
     * @param scopedVariables {ScopedVariables}
     * @returns {ScopedVariables}
     */
    private resolveVariable(dsl: DSLVariable, scopedVariables: ScopedVariables): ScopedVariables{
        if(dsl.value[0] === `'` || dsl.value[0] === `"`){
            scopedVariables[dsl.key] = dsl.value.slice(1, dsl.value.length - 1);
        } else if(isNaN(+dsl.value)) {
            if(scopedVariables[dsl.value] == null) throw new Error(`SQiggLVariableResolutionError: Unable to find ${dsl.value} in the current scope`);
            scopedVariables[dsl.key] = scopedVariables[dsl.value];
        } else {
            scopedVariables[dsl.key] = +dsl.value;
        }
        return scopedVariables;
    }

    /**
     * Resolves a value as either a literal string, literal number,
     * or a variable value and then returns that value as a string.
     *
     * @internal
     * @param value {string | number} - The value to resolve.
     * @param variables {ScopedVariables} - The list of known variables for this scope.
     * @returns {string} - The resolved value.
     */
    public static resolveValue(value: string | number, variables: ScopedVariables): string{
        if(value[0] === `'` || value[0] === `"`) return (<string>value).slice(1, (<string>value).length - 1);
        if(!isNaN(+value)) return value.toString();
        if(!!variables && variables.hasOwnProperty(<string>value)) return variables[<string>value];
        throw new Error(`SQiggLParserError: ${value} is not a defined variable in this scope`);
    }
}